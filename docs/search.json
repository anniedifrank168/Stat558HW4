[
  {
    "objectID": "ST558HW4.html",
    "href": "ST558HW4.html",
    "title": "ST558HW4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n../MyData.csv ; this path goes up one level from the homework directory (../) to access MyData.csv\n\nWhat are the major benefits of using R projects?\n\nThe major benefits of using R projects are that you can easily organize files associated with your project because you have a consistent working directory; you do not need to manually set the working directory. You can also use Git’s version control system which allows you to push your project up to GitHub, which makes it easy to share your work with others and maintain a history of your work.\n\nWhat is git and what is github?\n\nGit operates locally on your computer as a version control system; it tracks and stores changes to your files/scripts. GitHub works in union with Git as a hosting service for Git repositiories; instead of Git, a local repository, it is a remote repository that stores your work on a cloud. This enables easy collaboration with others; others can see your work on the cloud and access your files and create forks to edit files (and then push those changes to your repository with permission from the repository owner.)\n\nWhat are the two main differences between a tibble and a data.frame?\n\nOne main difference between a tibble and a data.frame is that when you print a tibble, you get ‘fancy’ printing that additionally provides information on the number of observations and columns, and only the first 10 rows (and as many columns that fit reasonably) are printed so it does not clog up the output space. Another main difference is in data type maitenance; they don’t coerce down to a vector when you subset to only one column using[]. With a tibble, it will coerce it to a tibble of nrow x 1 (the column selected). With a dataframe, it will just return the values of the column as a vector. For tibble, if you want a vector, you can use the $ operator or the pull() function from dplyr.\n\nRewrite the following nested function call using BaseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\niris |&gt; as_tibble(iris) |&gt; select(starts_with(“Petal”),Species) |&gt; filter(Petal.Length &lt;1.55) |&gt; arrange(Species)\n\n\nIn this code I start with iris, the data frame, to pass it to the chain operator. First I coerced it into a tibble, then I used the select function to select the desired columns. Then I filtered on the petal length and arranged by the Species variable."
  },
  {
    "objectID": "ST558HW4.html#task-1-conceptual-questions",
    "href": "ST558HW4.html#task-1-conceptual-questions",
    "title": "ST558HW4",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n../MyData.csv ; this path goes up one level from the homework directory (../) to access MyData.csv\n\nWhat are the major benefits of using R projects?\n\nThe major benefits of using R projects are that you can easily organize files associated with your project because you have a consistent working directory; you do not need to manually set the working directory. You can also use Git’s version control system which allows you to push your project up to GitHub, which makes it easy to share your work with others and maintain a history of your work.\n\nWhat is git and what is github?\n\nGit operates locally on your computer as a version control system; it tracks and stores changes to your files/scripts. GitHub works in union with Git as a hosting service for Git repositiories; instead of Git, a local repository, it is a remote repository that stores your work on a cloud. This enables easy collaboration with others; others can see your work on the cloud and access your files and create forks to edit files (and then push those changes to your repository with permission from the repository owner.)\n\nWhat are the two main differences between a tibble and a data.frame?\n\nOne main difference between a tibble and a data.frame is that when you print a tibble, you get ‘fancy’ printing that additionally provides information on the number of observations and columns, and only the first 10 rows (and as many columns that fit reasonably) are printed so it does not clog up the output space. Another main difference is in data type maitenance; they don’t coerce down to a vector when you subset to only one column using[]. With a tibble, it will coerce it to a tibble of nrow x 1 (the column selected). With a dataframe, it will just return the values of the column as a vector. For tibble, if you want a vector, you can use the $ operator or the pull() function from dplyr.\n\nRewrite the following nested function call using BaseR’s chaining operator: arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\niris |&gt; as_tibble(iris) |&gt; select(starts_with(“Petal”),Species) |&gt; filter(Petal.Length &lt;1.55) |&gt; arrange(Species)\n\n\nIn this code I start with iris, the data frame, to pass it to the chain operator. First I coerced it into a tibble, then I used the select function to select the desired columns. Then I filtered on the petal length and arranged by the Species variable."
  },
  {
    "objectID": "ST558HW4.html#task-2-reading-delimited-data",
    "href": "ST558HW4.html#task-2-reading-delimited-data",
    "title": "ST558HW4",
    "section": "Task 2: Reading Delimited Data",
    "text": "Task 2: Reading Delimited Data\n\nGlass Data Manipulation\n\n#note- I did an initial r setup chuck to load packages. i did include = FALSE\n#First going to read this data into R directly from the URL and print the tibble \n\nglass_data &lt;-\n  read_delim(\n    \"https://www4.stat.ncsu.edu/online/datasets/glass.data\",\n    delim = \",\",\n    col_names = c(\n      \"Id\",\n      \"RefIndx\",\n      \"Na\",\n      \"Mg\",\n      \"Al\",\n      \"Si\",\n      \"K\",\n      \"Ca\",\n      \"Ba\",\n      \"Fe\",\n      \"TypeofGlass\"\n    )\n  )\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RefIndx, Na, Mg, Al, Si, K, Ca, Ba, Fe, TypeofGlass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id RefIndx    Na    Mg    Al    Si     K    Ca    Ba    Fe TypeofGlass\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;\n 1     1    1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0              1\n 2     2    1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0              1\n 3     3    1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0              1\n 4     4    1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0              1\n 5     5    1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0              1\n 6     6    1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26           1\n 7     7    1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0              1\n 8     8    1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0              1\n 9     9    1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0              1\n10    10    1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11           1\n# ℹ 204 more rows\n\n#mutating the type of glass column variables from numbers to names\nglass_data &lt;- glass_data |&gt;\n  mutate(TypeofGlass = ifelse(\n    TypeofGlass == 1,\n    \"building_windows_float_processed\",\n    ifelse(\n      TypeofGlass == 2,\n      \"building_windows_non_float_processed\",\n      ifelse(\n        TypeofGlass == 3,\n        \"vehicle_windows_float_processed\",\n        ifelse(\n          TypeofGlass == 4,\n          \"vehicle_windows_non_float_processed\",\n          ifelse(\n            TypeofGlass == 5,\n            \"containers\",\n            ifelse(\n              TypeofGlass == 6,\n              \"tableware\",\n              ifelse(TypeofGlass == 7, \"headlamps\", NA)\n            )\n          )\n        )\n      )\n    )\n  ))\n#making sure it is a character structure\nstr(glass_data$TypeofGlass)\n\n chr [1:214] \"building_windows_float_processed\" ...\n\n#reloading glass_data so I can remanipulate it \nglass_data &lt;-\n  read_delim(\n    \"https://www4.stat.ncsu.edu/online/datasets/glass.data\",\n    delim = \",\",\n    col_names = c(\n      \"Id\",\n      \"RefIndx\",\n      \"Na\",\n      \"Mg\",\n      \"Al\",\n      \"Si\",\n      \"K\",\n      \"Ca\",\n      \"Ba\",\n      \"Fe\",\n      \"TypeofGlass\"\n    )\n  )\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RefIndx, Na, Mg, Al, Si, K, Ca, Ba, Fe, TypeofGlass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id RefIndx    Na    Mg    Al    Si     K    Ca    Ba    Fe TypeofGlass\n   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;       &lt;dbl&gt;\n 1     1    1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0              1\n 2     2    1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0              1\n 3     3    1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0              1\n 4     4    1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0              1\n 5     5    1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0              1\n 6     6    1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26           1\n 7     7    1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0              1\n 8     8    1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0              1\n 9     9    1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0              1\n10    10    1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11           1\n# ℹ 204 more rows\n\n#continuing the above string to keep only obervations where the Fe variable is less than 0.2 and the type of glass is either tableware or headlamp \n\nglass_data &lt;- glass_data |&gt;\n  mutate(TypeofGlass = ifelse(\n    TypeofGlass == 1,\n    \"building_windows_float_processed\",\n    ifelse(\n      TypeofGlass == 2,\n      \"building_windows_non_float_processed\",\n      ifelse(\n        TypeofGlass == 3,\n        \"vehicle_windows_float_processed\",\n        ifelse(\n          TypeofGlass == 4,\n          \"vehicle_windows_non_float_processed\",\n          ifelse(\n            TypeofGlass == 5,\n            \"containers\",\n            ifelse(\n              TypeofGlass == 6,\n              \"tableware\",\n              ifelse(TypeofGlass == 7, \"headlamps\", NA)\n            )\n          )\n        )\n      )\n    )\n  )) |&gt; subset(Fe &lt; 0.2) |&gt; filter(TypeofGlass %in% c(\"tableware\", \"headlamps\"))\n\n\n\nYeast Data Manipulation\n\n#reading in data and manipulating column names \nyeast_data &lt;-\n  read_delim(\n    \"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n    delim = \"\\t\",\n    col_names = FALSE\n  )\n\nRows: 1484 Columns: 1\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): X1\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n#not sure why it is reading everything into one column so going to manually split it \nyeast_data &lt;-\n  yeast_data |&gt; separate(\n    col = X1,\n    into = c(\n      \"seq_name\",\n      \"mcg\",\n      \"gvh\",\n      \"alm\",\n      \"mit\",\n      \"erl\",\n      \"pox\",\n      \"vac\",\n      \"nuc\",\n      \"class\"\n    ),\n    sep = \"\\\\s+\",\n    remove = TRUE\n  )\n\n#creating a chain that removes the seq_name and nuc columns, then adds columns corresponding to the mean and median of each numerica variable at each class grouping (using across() function)\n\nyeast_data &lt;-\n  yeast_data |&gt; select(-seq_name,-nuc) |&gt; mutate(across(c(mcg, gvh, alm, mit, erl, pox, vac), as.numeric)) |&gt; group_by(class) |&gt; summarize(across(\n    c(mcg, gvh, alm, mit, erl, pox, vac),\n    list(mean = mean, median = median),\n    .names = \"{.col}_{.fn}\"\n  ))\n\nyeast_data\n\n# A tibble: 10 × 15\n   class mcg_mean mcg_median gvh_mean gvh_median alm_mean alm_median mit_mean\n   &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1 CYT      0.481       0.48    0.470      0.46     0.535      0.53     0.227\n 2 ERL      0.792       0.78    0.772      0.8      0.482      0.5      0.336\n 3 EXC      0.735       0.77    0.717      0.73     0.493      0.49     0.292\n 4 ME1      0.789       0.78    0.757      0.73     0.376      0.365    0.312\n 5 ME2      0.722       0.76    0.603      0.59     0.415      0.41     0.283\n 6 ME3      0.431       0.43    0.490      0.49     0.364      0.36     0.213\n 7 MIT      0.521       0.51    0.533      0.53     0.517      0.52     0.404\n 8 NUC      0.452       0.45    0.456      0.46     0.529      0.53     0.228\n 9 POX      0.521       0.48    0.508      0.505    0.506      0.51     0.248\n10 VAC      0.548       0.56    0.526      0.505    0.465      0.495    0.201\n# ℹ 7 more variables: mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;\n\n#EXPLANATION: after removing the columns, I used mutate() to change the columns from character into numeric so I could perform the summary functions on them. Then did group_by(class) to group the data by the class variable, then the summarize() function with (across) to calculate the mean and median of each numeric variable. Then for names I used the .names argument of across() to name each output column as the column name_function name. I know it was done differently in the class example but I liked this better since we are doing statistics for many variables not just one"
  },
  {
    "objectID": "ST558HW4.html#task-3-combining-excel-and-delimited-data",
    "href": "ST558HW4.html#task-3-combining-excel-and-delimited-data",
    "title": "ST558HW4",
    "section": "Task 3: Combining Excel and Delimited Data",
    "text": "Task 3: Combining Excel and Delimited Data\n\nPart 1 (Question 1-3) Manipulating the white wine dataset\n\n#1. Importing first sheet of the wine data using readxl package and printing out the tibble \nwhitewine &lt;-\n  readxl::read_excel(\"white-wine.xlsx\", sheet = \"white-wine\") \nwhitewine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n#2. Reading in the data from the 2nd sheet for the column names \nvariables &lt;-\n  readxl::read_excel(\"white-wine.xlsx\", sheet = \"variables\")\n\ncolnames(whitewine) &lt;- variables$Variables\n\n#3. Adding a column to indicate the wines that are white, using the mutate function from dplyr\nwhitewine &lt;- whitewine |&gt; mutate(type = \"white\")\nwhitewine\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\n\nPart 2 (Questions 4-5) Manipulating the red wine data set and combining both into a full wine data set\n\n#4. Reading in red wine data set, appending the type column as done above. Using read_csv2 because the delimiter is ; \nredwine &lt;-\n  readr::read_csv2(\"red-wine.csv\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 1599 Columns: 12\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (5): volatile acidity, citric acid, chlorides, density, sulphates\ndbl (2): total sulfur dioxide, quality\nnum (5): fixed acidity, residual sugar, free sulfur dioxide, pH, alcohol\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nredwine\n\n# A tibble: 1,599 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;                    &lt;dbl&gt; &lt;chr&gt;    \n 1              74 0.7                0                           19 0.076    \n 2              78 0.88               0                           26 0.098    \n 3              78 0.76               0.04                        23 0.092    \n 4             112 0.28               0.56                        19 0.075    \n 5              74 0.7                0                           19 0.076    \n 6              74 0.66               0                           18 0.075    \n 7              79 0.6                0.06                        16 0.069    \n 8              73 0.65               0                           12 0.065    \n 9              78 0.58               0.02                         2 0.073    \n10              75 0.5                0.36                        61 0.071    \n# ℹ 1,589 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;chr&gt;, pH &lt;dbl&gt;, sulphates &lt;chr&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\ncolnames(redwine) &lt;- variables$Variables\n\n#making columns numeric so i can later combine with the white wine data set, since they are numeric there \nredwine&lt;- redwine |&gt; mutate(across(everything(), as.numeric))\n\nredwine &lt;- redwine |&gt; mutate(type = \"red\")\nredwine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            74             0.7         0                19     0.076\n 2            78             0.88        0                26     0.098\n 3            78             0.76        0.04             23     0.092\n 4           112             0.28        0.56             19     0.075\n 5            74             0.7         0                19     0.076\n 6            74             0.66        0                18     0.075\n 7            79             0.6         0.06             16     0.069\n 8            73             0.65        0                12     0.065\n 9            78             0.58        0.02              2     0.073\n10            75             0.5         0.36             61     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n#5. Combining the datasets \nwine_data &lt;- dplyr::bind_rows(whitewine, redwine)\nwine_data\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   type &lt;chr&gt;\n\n\n\n\nPart 3 (Questions 6-9) Manipulating the final wine dataset\n\n#6-9 Creating a chain on the dataset that filters the data to only look at high-quality wines and wines that have a reasonable alcohol level, then sorts the data from highest to lowest quality, then selects only the variables that contain acid, alcohol, type, and quality, then add the mean and std dev of the alcohol variable to the data set for each setting of the quality variable\n\n#6. \nwine_data &lt;-\n  wine_data |&gt; filter(quality &gt;6.5, alcohol &lt;132)\n\n#7.\nwine_data &lt;-\n  wine_data |&gt; filter(quality &gt;6.5, alcohol &lt;132) |&gt; arrange(desc(quality))\n\n#8.\nwine_data &lt;-\n  wine_data |&gt; filter(quality &gt;6.5, alcohol &lt;132) |&gt; arrange(desc(quality)) |&gt; select(contains(\"acid\"), alcohol, type, quality)\n\n#9\nwine_data &lt;-\n  wine_data |&gt; filter(quality &gt;6.5, alcohol &lt;132) |&gt; arrange(desc(quality)) |&gt; select(contains(\"acid\"), alcohol, type, quality) |&gt; group_by(quality) |&gt; mutate(alcohol_mean= mean(alcohol), alcohol_stddev= sd(alcohol))\nwine_data\n\n# A tibble: 1,198 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;   &lt;dbl&gt;        &lt;dbl&gt;\n 1            91             0.27        0.45     104 white       9         122.\n 2            66             0.36        0.29     124 white       9         122.\n 3            74             0.24        0.36     125 white       9         122.\n 4            69             0.36        0.34     127 white       9         122.\n 5            71             0.26        0.49     129 white       9         122.\n 6            62             0.66        0.48     128 white       8         102.\n 7            62             0.66        0.48     128 white       8         102.\n 8            68             0.26        0.42     105 white       8         102.\n 9            67             0.23        0.31     107 white       8         102.\n10            67             0.23        0.31     107 white       8         102.\n# ℹ 1,188 more rows\n# ℹ 1 more variable: alcohol_stddev &lt;dbl&gt;"
  }
]