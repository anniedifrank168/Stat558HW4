---
title: "ST558HW4"
format: html
editor: visual
---

```{r setup, include=FALSE}
#Load packages
library(dplyr)
library(readr)
library(tidyr)
library(readxl)
```

## Task 1: Conceptual Questions

1.  If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?

    > ../MyData.csv ; this path goes up one level from the homework directory (../) to access MyData.csv

2.  What are the major benefits of using R projects?

    > The major benefits of using R projects are that you can easily organize files associated with your project because you have a consistent working directory; you do not need to manually set the working directory. You can also use Git's version control system which allows you to push your project up to GitHub, which makes it easy to share your work with others and maintain a history of your work.

3.  What is git and what is github?

    > Git operates locally on your computer as a version control system; it tracks and stores changes to your files/scripts. GitHub works in union with Git as a hosting service for Git repositiories; instead of Git, a local repository, it is a remote repository that stores your work on a cloud. This enables easy collaboration with others; others can see your work on the cloud and access your files and create forks to edit files (and then push those changes to your repository with permission from the repository owner.)

4.  What are the two main differences between a tibble and a data.frame?

    > One main difference between a tibble and a data.frame is that when you print a tibble, you get 'fancy' printing that additionally provides information on the number of observations and columns, and only the first 10 rows (and as many columns that fit reasonably) are printed so it does not clog up the output space. Another main difference is in data type maitenance; they don't coerce down to a vector when you subset to only one column using\[\]. With a tibble, it will coerce it to a tibble of nrow x 1 (the column selected). With a dataframe, it will just return the values of the column as a vector. For tibble, if you want a vector, you can use the \$ operator or the pull() function from dplyr.

5.  Rewrite the following nested function call using BaseR's chaining operator: **arrange**(**filter**(**select**(**as_tibble**(iris), **starts_with**("Petal"), Species), Petal.Length **\<** 1.55), Species)

    > iris \|\> as_tibble(iris) |> select(starts_with("Petal"),Species) \|\> filter(Petal.Length \<1.55) \|\> arrange(Species)

    > In this code I start with iris, the data frame, to pass it to the        chain operator. First I coerced it into a tibble, then I used the        select function to select the desired columns. Then I filtered on        the petal length and arranged by the Species variable.

## Task 2: Reading Delimited Data

### Glass Data Manipulation

```{r}
#note- I did an initial r setup chuck to load packages. i did include = FALSE
#First going to read this data into R directly from the URL and print the tibble 

glass_data <-
  read_delim(
    "https://www4.stat.ncsu.edu/online/datasets/glass.data",
    delim = ",",
    col_names = c(
      "Id",
      "RefIndx",
      "Na",
      "Mg",
      "Al",
      "Si",
      "K",
      "Ca",
      "Ba",
      "Fe",
      "TypeofGlass"
    )
  )
glass_data

#mutating the type of glass column variables from numbers to names
glass_data <- glass_data |>
  mutate(TypeofGlass = ifelse(
    TypeofGlass == 1,
    "building_windows_float_processed",
    ifelse(
      TypeofGlass == 2,
      "building_windows_non_float_processed",
      ifelse(
        TypeofGlass == 3,
        "vehicle_windows_float_processed",
        ifelse(
          TypeofGlass == 4,
          "vehicle_windows_non_float_processed",
          ifelse(
            TypeofGlass == 5,
            "containers",
            ifelse(
              TypeofGlass == 6,
              "tableware",
              ifelse(TypeofGlass == 7, "headlamps", NA)
            )
          )
        )
      )
    )
  ))
#making sure it is a character structure
str(glass_data$TypeofGlass)

#reloading glass_data so I can remanipulate it 
glass_data <-
  read_delim(
    "https://www4.stat.ncsu.edu/online/datasets/glass.data",
    delim = ",",
    col_names = c(
      "Id",
      "RefIndx",
      "Na",
      "Mg",
      "Al",
      "Si",
      "K",
      "Ca",
      "Ba",
      "Fe",
      "TypeofGlass"
    )
  )
glass_data

#continuing the above string to keep only obervations where the Fe variable is less than 0.2 and the type of glass is either tableware or headlamp 

glass_data <- glass_data |>
  mutate(TypeofGlass = ifelse(
    TypeofGlass == 1,
    "building_windows_float_processed",
    ifelse(
      TypeofGlass == 2,
      "building_windows_non_float_processed",
      ifelse(
        TypeofGlass == 3,
        "vehicle_windows_float_processed",
        ifelse(
          TypeofGlass == 4,
          "vehicle_windows_non_float_processed",
          ifelse(
            TypeofGlass == 5,
            "containers",
            ifelse(
              TypeofGlass == 6,
              "tableware",
              ifelse(TypeofGlass == 7, "headlamps", NA)
            )
          )
        )
      )
    )
  )) |> subset(Fe < 0.2) |> filter(TypeofGlass %in% c("tableware", "headlamps"))
```

### Yeast Data Manipulation

```{r}
#reading in data and manipulating column names 
yeast_data <-
  read_delim(
    "https://www4.stat.ncsu.edu/~online/datasets/yeast.data",
    delim = "\t",
    col_names = FALSE
  )

#not sure why it is reading everything into one column so going to manually split it 
yeast_data <-
  yeast_data |> separate(
    col = X1,
    into = c(
      "seq_name",
      "mcg",
      "gvh",
      "alm",
      "mit",
      "erl",
      "pox",
      "vac",
      "nuc",
      "class"
    ),
    sep = "\\s+",
    remove = TRUE
  )

#creating a chain that removes the seq_name and nuc columns, then adds columns corresponding to the mean and median of each numerica variable at each class grouping (using across() function)

yeast_data <-
  yeast_data |> select(-seq_name,-nuc) |> mutate(across(c(mcg, gvh, alm, mit, erl, pox, vac), as.numeric)) |> group_by(class) |> summarize(across(
    c(mcg, gvh, alm, mit, erl, pox, vac),
    list(mean = mean, median = median),
    .names = "{.col}_{.fn}"
  ))

yeast_data
                                                                  
#EXPLANATION: after removing the columns, I used mutate() to change the columns from character into numeric so I could perform the summary functions on them. Then did group_by(class) to group the data by the class variable, then the summarize() function with (across) to calculate the mean and median of each numeric variable. Then for names I used the .names argument of across() to name each output column as the column name_function name. I know it was done differently in the class example but I liked this better since we are doing statistics for many variables not just one 
```

## Task 3: Combining Excel and Delimited Data

### Part 1 (Question 1-3) Manipulating the white wine dataset

```{r}
#1. Importing first sheet of the wine data using readxl package and printing out the tibble 
whitewine <-
  readxl::read_excel("white-wine.xlsx", sheet = "white-wine") 
whitewine

#2. Reading in the data from the 2nd sheet for the column names 
variables <-
  readxl::read_excel("white-wine.xlsx", sheet = "variables")

colnames(whitewine) <- variables$Variables

#3. Adding a column to indicate the wines that are white, using the mutate function from dplyr
whitewine <- whitewine |> mutate(type = "white")
whitewine
```

### Part 2 (Questions 4-5) Manipulating the red wine data set and combining both into a full wine data set

```{r}
#4. Reading in red wine data set, appending the type column as done above. Using read_csv2 because the delimiter is ; 
redwine <-
  readr::read_csv2("red-wine.csv")
redwine

colnames(redwine) <- variables$Variables

#making columns numeric so i can later combine with the white wine data set, since they are numeric there 
redwine<- redwine |> mutate(across(everything(), as.numeric))

redwine <- redwine |> mutate(type = "red")
redwine

#5. Combining the datasets 
wine_data <- dplyr::bind_rows(whitewine, redwine)
wine_data
```

### Part 3 (Questions 6-9) Manipulating the final wine dataset

```{r}

#6-9 Creating a chain on the dataset that filters the data to only look at high-quality wines and wines that have a reasonable alcohol level, then sorts the data from highest to lowest quality, then selects only the variables that contain acid, alcohol, type, and quality, then add the mean and std dev of the alcohol variable to the data set for each setting of the quality variable

#6. 
wine_data <-
  wine_data |> filter(quality >6.5, alcohol <132)

#7.
wine_data <-
  wine_data |> filter(quality >6.5, alcohol <132) |> arrange(desc(quality))

#8.
wine_data <-
  wine_data |> filter(quality >6.5, alcohol <132) |> arrange(desc(quality)) |> select(contains("acid"), alcohol, type, quality)

#9
wine_data <-
  wine_data |> filter(quality >6.5, alcohol <132) |> arrange(desc(quality)) |> select(contains("acid"), alcohol, type, quality) |> group_by(quality) |> mutate(alcohol_mean= mean(alcohol), alcohol_stddev= sd(alcohol))
wine_data
```
